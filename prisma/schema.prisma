generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  role          Role      @default(STUDENT)
  teacherCode   String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  courses       Course[]
  enrollments   Enrollment[]
  chatSessions  ChatSession[]
  pendingTranscripts PendingTranscript[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Course {
  id          String    @id @default(cuid())
  teacherId   String
  name        String
  description String?
  settings    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  teacher     User      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  enrollments Enrollment[]

  @@index([teacherId])
  @@map("courses")
}

model Lesson {
  id            String    @id @default(cuid())
  courseId      String
  title         String
  rawTranscript String    @db.Text
  summary       String?   @db.Text
  summaryStatus SummaryStatus @default(NOT_STARTED)
  lessonCode    String    @unique
  position      Int
  customPrompt  String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chatSessions  ChatSession[]

  @@index([courseId])
  @@index([lessonCode])
  @@map("lessons")
}

model Enrollment {
  id         String   @id @default(cuid())
  studentId  String
  courseId   String
  enrolledAt DateTime @default(now())

  student    User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
  @@map("enrollments")
}

model ChatSession {
  id        String    @id @default(cuid())
  lessonId  String
  studentId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  lesson    Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student   User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@unique([lessonId, studentId])
  @@index([lessonId])
  @@index([studentId])
  @@map("chat_sessions")
}

model Message {
  id            String      @id @default(cuid())
  chatSessionId String
  content       String      @db.Text
  role          MessageRole
  createdAt     DateTime    @default(now())

  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)

  @@index([chatSessionId])
  @@index([createdAt])
  @@map("messages")
}

enum MessageRole {
  USER
  ASSISTANT
}

model PendingTranscript {
  id              String   @id @default(cuid())
  teacherId       String
  teacherCode     String
  courseName      String
  lessonTitle     String
  rawTranscript   String   @db.Text
  capturedAt      DateTime
  metadata        Json?
  processed       Boolean  @default(false)
  createdAt       DateTime @default(now())

  teacher         User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([teacherId])
  @@index([teacherCode])
  @@index([processed])
  @@map("pending_transcripts")
}

model SystemPrompt {
  id        String   @id @default(cuid())
  name      String   @unique
  content   String   @db.Text
  version   Int      @default(1)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_prompts")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum SummaryStatus {
  NOT_STARTED    // Manual lesson, no generation queued
  GENERATING     // AI is actively generating
  COMPLETED      // Summary has been generated
  FAILED         // Generation failed
}
