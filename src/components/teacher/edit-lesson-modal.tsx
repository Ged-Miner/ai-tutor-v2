'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import {
  updateLessonSchema,
  type UpdateLessonInput,
} from '@/lib/validations/lesson';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { RefreshCw } from 'lucide-react';

interface EditLessonModalProps {
  lesson: {
    id: string;
    title: string;
    rawTranscript: string;
    summary: string | null;
    summaryStatus: string;
    customPrompt: string | null;
  };
  courseId: string;
  onClose: () => void;
}

export function EditLessonModal({
  lesson,
  courseId,
  onClose,
}: EditLessonModalProps) {
  const router = useRouter();
  const [error, setError] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [currentSummary, setCurrentSummary] = useState(lesson.summary);

  const {
    register,
    handleSubmit,
    setValue,
    formState: { errors },
  } = useForm<UpdateLessonInput>({
    resolver: zodResolver(updateLessonSchema),
    defaultValues: {
      title: lesson.title,
      rawTranscript: lesson.rawTranscript,
      summary: lesson.summary || '',
      customPrompt: lesson.customPrompt || '',
    },
  });

  const onSubmit = async (data: UpdateLessonInput) => {
    setIsSubmitting(true);
    setError('');

    try {
      const response = await fetch(
        `/api/teacher/courses/${courseId}/lessons/${lesson.id}`,
        {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data),
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to update lesson');
      }

      router.refresh();
      onClose();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update lesson');
      setIsSubmitting(false);
    }
  };

  const handleRefreshSummary = async () => {
    setIsRefreshing(true);
    try {
      const response = await fetch(
        `/api/teacher/courses/${courseId}/lessons/${lesson.id}`
      );

      if (response.ok) {
        const data = await response.json();
        if (data.summary) {
          setCurrentSummary(data.summary);
          setValue('summary', data.summary);
        }
        // Refresh the page to update status
        if (data.summaryStatus !== lesson.summaryStatus) {
          window.location.reload();
        }
      }
    } catch (err) {
      console.error('Failed to refresh summary:', err);
    } finally {
      setIsRefreshing(false);
    }
  };

  return (
    <Dialog open onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Edit Lesson</DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          {/* Lesson Title */}
          <div className="space-y-2">
            <Label htmlFor="title">
              Lesson Title <span className="text-red-500">*</span>
            </Label>
            <Input id="title" {...register('title')} />
            {errors.title && (
              <p className="text-sm text-red-600">{errors.title.message}</p>
            )}
          </div>

          {/* Raw Transcript */}
          <div className="space-y-2">
            <Label htmlFor="rawTranscript">
              Lesson Transcript <span className="text-red-500">*</span>
            </Label>
            <Textarea
              id="rawTranscript"
              {...register('rawTranscript')}
              rows={10}
              className="font-mono text-sm"
            />
            {errors.rawTranscript && (
              <p className="text-sm text-red-600">
                {errors.rawTranscript.message}
              </p>
            )}
          </div>

          {/* Summary - Conditional Rendering Based on Status */}
          <div className="space-y-2">
            <Label htmlFor="summary">Summary</Label>

            {lesson.summaryStatus === 'GENERATING' ? (
              // AI is actively generating
              <Alert className="border-yellow-200 bg-yellow-50">
                <AlertDescription className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="animate-spin h-4 w-4 border-2 border-yellow-600 border-t-transparent rounded-full" />
                    <span className="text-yellow-900 text-sm">
                      Summary is being generated by AI. This may take 10-30 seconds.
                    </span>
                  </div>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={handleRefreshSummary}
                    disabled={isRefreshing}
                    className="ml-2"
                  >
                    <RefreshCw className={`h-3 w-3 mr-1 ${isRefreshing ? 'animate-spin' : ''}`} />
                    {isRefreshing ? 'Checking...' : 'Check Status'}
                  </Button>
                </AlertDescription>
              </Alert>
            ) : lesson.summaryStatus === 'FAILED' ? (
              // Generation failed
              <Alert className="border-red-200 bg-red-50">
                <AlertDescription>
                  <div className="flex items-center justify-between">
                    <span className="text-red-900 text-sm">
                      AI summary generation failed. You can write a summary manually below.
                    </span>
                  </div>
                  <Textarea
                    id="summary"
                    {...register('summary')}
                    rows={6}
                    className="font-sans text-sm mt-2"
                    placeholder="Write your summary here..."
                  />
                </AlertDescription>
              </Alert>
            ) : (
              // NOT_STARTED or COMPLETED - show editable textarea
              <>
                <Textarea
                  id="summary"
                  {...register('summary')}
                  rows={6}
                  className="font-sans text-sm"
                  placeholder={lesson.summaryStatus === 'NOT_STARTED' ? 'Write your lesson summary here...' : ''}
                />
                {errors.summary && (
                  <p className="text-sm text-red-600">{errors.summary.message}</p>
                )}
              </>
            )}
          </div>

          {/* Custom Prompt */}
          <div className="space-y-2">
            <Label htmlFor="customPrompt">Custom AI Prompt (Optional)</Label>
            <Textarea
              id="customPrompt"
              {...register('customPrompt')}
              rows={3}
              placeholder="Override the default AI tutor prompt for this specific lesson..."
            />
            {errors.customPrompt && (
              <p className="text-sm text-red-600">
                {errors.customPrompt.message}
              </p>
            )}
            <p className="text-xs text-muted-foreground">
              Leave blank to use the default AI tutor prompt
            </p>
          </div>

          {/* Error Message */}
          {error && (
            <Alert variant="destructive">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {/* Buttons */}
          <div className="flex justify-end gap-3">
            <Button
              type="button"
              variant="outline"
              onClick={onClose}
              disabled={isSubmitting}
            >
              Cancel
            </Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? 'Saving...' : 'Save Changes'}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}
